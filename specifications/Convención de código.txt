Convención de código

Base de datos:
snake_case para tablas y columnas (ejemplo: order_id, user_email).

Backend (Node/TS):

camelCase en TODO el código: variables, funciones, DTOs, servicios, etc.
Prisma puede mapear automáticamente de snake_case (DB) a camelCase (código).

API (backend → frontend):
Devuelve los datos en camelCase.
Si Prisma te da los datos en snake_case, usa camelcase-keys en el backend antes de devolverlos.
Así, el frontend siempre recibe camelCase.

Frontend:
camelCase en todo: variables, props, DTOs, hooks, componentes, etc.

Mantén los roles en snake_case en el frontend y backend para evitar errores de autorización y mantener coherencia con tu base de datos y enums.

¿Cuándo transformar?
De snake_case a camelCase:
En el backend, justo después de obtener los datos de la base de datos y antes de devolverlos al frontend.


De camelCase a snake_case:
Solo si el backend espera recibir datos en snake_case (por ejemplo, en endpoints POST/PUT).
