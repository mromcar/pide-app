
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  role: 'role',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  establishment_id: 'establishment_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EstablishmentScalarFieldEnum = {
  establishment_id: 'establishment_id',
  name: 'name',
  tax_id: 'tax_id',
  address: 'address',
  postal_code: 'postal_code',
  city: 'city',
  phone1: 'phone1',
  phone2: 'phone2',
  billing_bank_details: 'billing_bank_details',
  payment_bank_details: 'payment_bank_details',
  contact_person: 'contact_person',
  admin_user_id: 'admin_user_id',
  description: 'description',
  website: 'website',
  is_active: 'is_active',
  accepts_orders: 'accepts_orders'
};

exports.Prisma.CategoryScalarFieldEnum = {
  category_id: 'category_id',
  establishment_id: 'establishment_id',
  name: 'name',
  image_url: 'image_url',
  sort_order: 'sort_order',
  is_active: 'is_active'
};

exports.Prisma.CategoryTranslationScalarFieldEnum = {
  translation_id: 'translation_id',
  category_id: 'category_id',
  language_code: 'language_code',
  name: 'name'
};

exports.Prisma.ProductScalarFieldEnum = {
  product_id: 'product_id',
  establishment_id: 'establishment_id',
  category_id: 'category_id',
  name: 'name',
  description: 'description',
  image_url: 'image_url',
  sort_order: 'sort_order',
  is_active: 'is_active'
};

exports.Prisma.ProductTranslationScalarFieldEnum = {
  translation_id: 'translation_id',
  product_id: 'product_id',
  language_code: 'language_code',
  name: 'name',
  description: 'description'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  variant_id: 'variant_id',
  product_id: 'product_id',
  establishment_id: 'establishment_id',
  variant_description: 'variant_description',
  price: 'price',
  sku: 'sku',
  sort_order: 'sort_order',
  is_active: 'is_active'
};

exports.Prisma.ProductVariantTranslationScalarFieldEnum = {
  translation_id: 'translation_id',
  variant_id: 'variant_id',
  language_code: 'language_code',
  variant_description: 'variant_description'
};

exports.Prisma.OrderScalarFieldEnum = {
  order_id: 'order_id',
  establishment_id: 'establishment_id',
  client_user_id: 'client_user_id',
  waiter_user_id: 'waiter_user_id',
  table_number: 'table_number',
  status: 'status',
  total_amount: 'total_amount',
  payment_method: 'payment_method',
  payment_status: 'payment_status',
  order_type: 'order_type',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  order_item_id: 'order_item_id',
  order_id: 'order_id',
  variant_id: 'variant_id',
  quantity: 'quantity',
  unit_price: 'unit_price',
  item_total_price: 'item_total_price',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.OrderStatusHistoryScalarFieldEnum = {
  history_id: 'history_id',
  order_id: 'order_id',
  status: 'status',
  changed_by_user_id: 'changed_by_user_id',
  changed_at: 'changed_at',
  notes: 'notes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  client: 'client',
  waiter: 'waiter',
  cook: 'cook',
  establishment_admin: 'establishment_admin',
  general_admin: 'general_admin'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  READY: 'READY',
  DELIVERED: 'DELIVERED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.OrderItemStatus = exports.$Enums.OrderItemStatus = {
  PENDING: 'PENDING',
  PREPARING: 'PREPARING',
  READY: 'READY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Establishment: 'Establishment',
  Category: 'Category',
  CategoryTranslation: 'CategoryTranslation',
  Product: 'Product',
  ProductTranslation: 'ProductTranslation',
  ProductVariant: 'ProductVariant',
  ProductVariantTranslation: 'ProductVariantTranslation',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderStatusHistory: 'OrderStatusHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
