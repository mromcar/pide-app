generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Establishment {
  id                         Int                          @id @default(autoincrement()) @map("establishment_id")
  name                       String                       @db.VarChar(255)
  taxId                      String?                      @unique @map("tax_id") @db.VarChar(20)
  address                    String?
  postalCode                 String?                      @map("postal_code") @db.VarChar(10)
  city                       String?                      @db.VarChar(100)
  phone1                     String?                      @db.VarChar(20)
  phone2                     String?                      @db.VarChar(20)
  billingBankDetails         String?                      @map("billing_bank_details")
  paymentBankDetails         String?                      @map("payment_bank_details")
  contactPerson              String?                      @map("contact_person") @db.VarChar(255)
  description                String?
  website                    String?                      @db.VarChar(255)
  isActive                   Boolean?                     @default(true) @map("is_active")
  acceptsOrders              Boolean                      @default(true) @map("accepts_orders")
  categories                 Category[]
  EstablishmentAdministrator EstablishmentAdministrator[]
  orders                     Order[]
  productVariants            ProductVariant[]
  products                   Product[]
  users                      User[]

  @@map("establishments")
}

model User {
  id                         Int                          @id @default(autoincrement()) @map("user_id")
  role                       UserRole
  name                       String?                      @db.VarChar(255)
  email                      String                       @unique @db.VarChar(255)
  passwordHash               String                       @map("password_hash") @db.VarChar(255)
  establishmentId            Int?                         @map("establishment_id")
  createdAt                  DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                  DateTime?                    @default(now()) @map("updated_at") @db.Timestamp(6)
  EstablishmentAdministrator EstablishmentAdministrator[]
  statusChanges              OrderStatusHistory[]         @relation("StatusChanger")
  ordersAsClient             Order[]                      @relation("ClientOrders")
  ordersAsWaiter             Order[]                      @relation("WaiterOrders")
  establishment              Establishment?               @relation(fields: [establishmentId], references: [id], onUpdate: NoAction, map: "fk_user_establishment")

  @@index([email], map: "idx_users_email")
  @@index([establishmentId], map: "idx_users_establishment_id")
  @@map("users")
}

model EstablishmentAdministrator {
  userId          Int           @map("user_id")
  establishmentId Int           @map("establishment_id")
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_establishment")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_user")

  @@id([userId, establishmentId], map: "pk_establishment_admin")
  @@index([establishmentId], map: "idx_ea_establishment_id")
  @@index([userId], map: "idx_ea_user_id")
  @@map("establishment_administrators")
}

model Category {
  id              Int                   @id @default(autoincrement()) @map("category_id")
  establishmentId Int                   @map("establishment_id")
  name            String                @db.VarChar(255)
  imageUrl        String?               @map("image_url") @db.VarChar(255)
  sortOrder       Int?                  @default(0) @map("sort_order")
  isActive        Boolean?              @default(true) @map("is_active")
  establishment   Establishment         @relation(fields: [establishmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_category_establishment")
  translations    CategoryTranslation[]
  products        Product[]

  @@index([establishmentId], map: "idx_categories_establishment_id")
  @@map("categories")
}

model CategoryTranslation {
  id           Int      @id @default(autoincrement()) @map("translation_id")
  categoryId   Int      @map("category_id")
  languageCode String   @map("language_code") @db.VarChar(10)
  name         String   @db.VarChar(255)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_category")

  @@unique([categoryId, languageCode], map: "unique_category_language")
  @@index([categoryId], map: "idx_category_translations_category_id")
  @@index([languageCode], map: "idx_category_translations_language_code")
  @@map("category_translations")
}

model Product {
  id              Int                  @id @default(autoincrement()) @map("product_id")
  establishmentId Int                  @map("establishment_id")
  categoryId      Int                  @map("category_id")
  name            String               @db.VarChar(255)
  description     String?
  imageUrl        String?              @map("image_url") @db.VarChar(255)
  sortOrder       Int?                 @default(0) @map("sort_order")
  isActive        Boolean?             @default(true) @map("is_active")
  responsibleRole UserRole?            @map("responsible_role")
  allergens       ProductAllergen[]
  translations    ProductTranslation[]
  variants        ProductVariant[]
  category        Category             @relation(fields: [categoryId], references: [id], onUpdate: NoAction, map: "fk_product_category")
  establishment   Establishment        @relation(fields: [establishmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_establishment")

  @@index([categoryId], map: "idx_products_category_id")
  @@index([establishmentId], map: "idx_products_establishment_id")
  @@index([name], map: "idx_products_name")
  @@index([responsibleRole], map: "idx_products_responsible_role")
  @@map("products")
}

model ProductTranslation {
  id           Int     @id @default(autoincrement()) @map("translation_id")
  productId    Int     @map("product_id")
  languageCode String  @map("language_code") @db.VarChar(10)
  name         String  @db.VarChar(255)
  description  String?
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_product")

  @@unique([productId, languageCode], map: "unique_product_language")
  @@index([languageCode], map: "idx_product_translations_language_code")
  @@index([productId], map: "idx_product_translations_product_id")
  @@map("product_translations")
}

model ProductVariant {
  id                 Int                         @id @default(autoincrement()) @map("variant_id")
  productId          Int                         @map("product_id")
  establishmentId    Int                         @map("establishment_id")
  variantDescription String                      @map("variant_description") @db.VarChar(100)
  price              Decimal                     @map("price") @db.Decimal(10, 2)
  sku                String?                     @unique @db.VarChar(50)
  sortOrder          Int?                        @default(0) @map("sort_order")
  isActive           Boolean?                    @default(true) @map("is_active")
  orderItems         OrderItem[]
  translations       ProductVariantTranslation[]
  establishment      Establishment               @relation(fields: [establishmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variant_establishment")
  product            Product                     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variant_product")

  @@unique([productId, variantDescription], map: "unique_product_variant_description")
  @@index([establishmentId], map: "idx_product_variants_establishment_id")
  @@index([price], map: "idx_product_variants_price")
  @@index([productId], map: "idx_product_variants_product_id")
  @@map("product_variants")
}

model ProductVariantTranslation {
  id                 Int            @id @default(autoincrement()) @map("translation_id")
  variantId          Int            @map("variant_id")
  languageCode       String         @map("language_code") @db.VarChar(10)
  variantDescription String         @map("variant_description") @db.VarChar(255)
  variant            ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_variant")

  @@unique([variantId, languageCode], map: "unique_variant_language")
  @@index([languageCode], map: "idx_product_variant_translations_language_code")
  @@index([variantId], map: "idx_product_variant_translations_variant_id")
  @@map("product_variant_translations")
}

model Allergen {
  id              Int                   @id @default(autoincrement()) @map("allergen_id")
  code            String                @unique @db.VarChar(20)
  name            String                @db.VarChar(100)
  description     String?
  iconUrl         String?               @map("icon_url") @db.VarChar(255)
  isMajorAllergen Boolean?              @default(true) @map("is_major_allergen")
  translations    AllergenTranslation[]
  products        ProductAllergen[]

  @@index([code], map: "idx_allergens_code")
  @@map("allergens")
}

model AllergenTranslation {
  id           Int      @id @default(autoincrement()) @map("translation_id")
  allergenId   Int      @map("allergen_id")
  languageCode String   @map("language_code") @db.VarChar(10)
  name         String   @db.VarChar(100)
  description  String?
  allergen     Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_allergen")

  @@unique([allergenId, languageCode], map: "unique_allergen_language")
  @@index([allergenId], map: "idx_allergen_translations_allergen_id")
  @@index([languageCode], map: "idx_allergen_translations_language_code")
  @@map("allergen_translations")
}

model ProductAllergen {
  productId  Int      @map("product_id")
  allergenId Int      @map("allergen_id")
  allergen   Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_allergen")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_product")

  @@id([productId, allergenId], map: "pk_product_allergen")
  @@index([allergenId], map: "idx_product_allergens_allergen_id")
  @@index([productId], map: "idx_product_allergens_product_id")
  @@map("product_allergens")
}

model Order {
  id              Int                  @id @default(autoincrement()) @map("order_id")
  establishmentId Int                  @map("establishment_id")
  clientUserId    Int?                 @map("client_user_id")
  waiterUserId    Int?                 @map("waiter_user_id")
  tableNumber     String?              @map("table_number") @db.VarChar(20)
  status          OrderStatus          @default(PENDING)
  totalAmount     Decimal?             @default(0.00) @map("total_amount") @db.Decimal(10, 2)
  paymentMethod   String?              @map("payment_method") @db.VarChar(50)
  paymentStatus   String?              @default("UNPAID") @map("payment_status") @db.VarChar(20)
  orderType       String?              @map("order_type") @db.VarChar(50)
  notes           String?
  createdAt       DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?            @default(now()) @map("updated_at") @db.Timestamp(6)
  items           OrderItem[]
  statusHistory   OrderStatusHistory[]
  client          User?                @relation("ClientOrders", fields: [clientUserId], references: [id], onUpdate: NoAction, map: "fk_order_client")
  establishment   Establishment        @relation(fields: [establishmentId], references: [id], onUpdate: NoAction, map: "fk_order_establishment")
  waiter          User?                @relation("WaiterOrders", fields: [waiterUserId], references: [id], onUpdate: NoAction, map: "fk_order_waiter")

  @@index([clientUserId], map: "idx_orders_client_user_id")
  @@index([createdAt], map: "idx_orders_created_at")
  @@index([establishmentId], map: "idx_orders_establishment_id")
  @@map("orders")
}

model OrderItem {
  id        Int              @id @default(autoincrement()) @map("order_item_id")
  orderId   Int              @map("order_id")
  variantId Int              @map("variant_id")
  quantity  Int              @default(1)
  unitPrice Decimal          @map("unit_price") @db.Decimal(10, 2)
  itemTotal Decimal?         @default(dbgenerated("((quantity)::numeric * unit_price)")) @map("item_total_price") @db.Decimal(10, 2)
  status    OrderItemStatus? @default(PENDING)
  notes     String?
  order     Order            @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item_order")
  variant   ProductVariant   @relation(fields: [variantId], references: [id], onUpdate: NoAction, map: "fk_item_variant")

  @@index([orderId], map: "idx_order_items_order_id")
  @@index([variantId], map: "idx_order_items_variant_id")
  @@map("order_items")
}

model OrderStatusHistory {
  id              Int         @id @default(autoincrement()) @map("history_id")
  orderId         Int         @map("order_id")
  status          OrderStatus
  changedByUserId Int?        @map("changed_by_user_id")
  changedAt       DateTime?   @default(now()) @map("changed_at") @db.Timestamp(6)
  notes           String?
  order           Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_history_order")
  changedBy       User?       @relation("StatusChanger", fields: [changedByUserId], references: [id], onUpdate: NoAction, map: "fk_history_user")

  @@index([changedAt], map: "idx_order_status_history_changed_at")
  @@index([orderId], map: "idx_order_status_history_order_id")
  @@map("order_status_history")
}

enum UserRole {
  client
  waiter
  cook
  establishment_admin
  general_admin

  @@map("UserRole")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED

  @@map("OrderStatus")
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED

  @@map("OrderItemStatus")
}
