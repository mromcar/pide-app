generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id_usuario         Int              @id @default(autoincrement())
  rol                RolUsuario
  nombre             String?          @db.VarChar(255)
  email              String?          @unique @db.VarChar(255)
  contrasena         String?          @db.VarChar(255)
  id_establecimiento Int?
  administra         Establecimiento? @relation("AdminEstablecimiento")
  estadosPedido      EstadoPedido[]
  pedidos            Pedido[]         @relation("ClientePedidos")
  establecimiento    Establecimiento? @relation("UsuarioEstablecimiento", fields: [id_establecimiento], references: [id_establecimiento], onUpdate: NoAction, map: "fk_usuario_establecimiento")

  @@map("usuarios")
}

model Establecimiento {
  id_establecimiento               Int         @id @default(autoincrement())
  nombre                           String      @db.VarChar(255)
  cif                              String?     @db.VarChar(20)
  direccion                        String?
  cp                               String?     @db.VarChar(10)
  ciudad                           String?     @db.VarChar(100)
  telefono1                        String?     @db.VarChar(20)
  telefono2                        String?     @db.VarChar(20)
  datos_bancarios_cobro            String?
  datos_bancarios_pago             String?
  contacto                         String?     @db.VarChar(255)
  id_administrador_establecimiento Int?        @unique
  categorias                       Categoria[]
  administrador                    Usuario?    @relation("AdminEstablecimiento", fields: [id_administrador_establecimiento], references: [id_usuario], onUpdate: NoAction, map: "fk_establecimiento_admin")
  pedidos                          Pedido[]
  productos                        Producto[]
  empleados                        Usuario[]   @relation("UsuarioEstablecimiento")

  @@map("establecimientos")
}

model Categoria {
  id_categoria        Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(255)
  imagen_url          String?               @db.VarChar(255)
  id_establecimiento  Int
  orden               Int?                  @default(0)
  establecimiento     Establecimiento       @relation(fields: [id_establecimiento], references: [id_establecimiento], onDelete: Cascade, onUpdate: NoAction, map: "fk_categoria_establecimiento")
  CategoriaTraduccion CategoriaTraduccion[]
  productos           Producto[]

  @@map("categorias")
}

model CategoriaTraduccion {
  id_traduccion Int       @id @default(autoincrement())
  id_categoria  Int
  idioma        String    @db.VarChar(10)
  nombre        String    @db.VarChar(255)
  categoria     Categoria @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, onUpdate: NoAction, map: "fk_traduccion_categoria")

  @@unique([id_categoria, idioma], map: "unique_categoria_idioma")
  @@map("categorias_traducciones")
}

model Producto {
  id_producto        Int                  @id @default(autoincrement())
  nombre             String               @db.VarChar(255)
  descripcion        String?
  precio             Decimal              @db.Decimal(10, 2)
  imagen_url         String?              @db.VarChar(255)
  id_categoria       Int
  id_establecimiento Int
  orden              Int?                 @default(0)
  detallesPedido     DetallePedido[]
  categoria          Categoria            @relation(fields: [id_categoria], references: [id_categoria], onUpdate: NoAction, map: "fk_producto_categoria")
  establecimiento    Establecimiento      @relation(fields: [id_establecimiento], references: [id_establecimiento], onDelete: Cascade, onUpdate: NoAction, map: "fk_producto_establecimiento")
  ProductoTraduccion ProductoTraduccion[]

  @@map("productos")
}

model ProductoTraduccion {
  id_traduccion Int      @id @default(autoincrement())
  id_producto   Int
  idioma        String   @db.VarChar(10)
  nombre        String   @db.VarChar(255)
  descripcion   String?
  producto      Producto @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade, onUpdate: NoAction, map: "fk_traduccion_producto")

  @@unique([id_producto, idioma], map: "unique_producto_idioma")
  @@map("productos_traducciones")
}

model Pedido {
  id_pedido          Int                  @id @default(autoincrement())
  id_cliente         Int?
  id_establecimiento Int
  fecha_hora         DateTime             @default(now()) @db.Timestamp(6)
  estado             EstadoPedidoGeneral? @default(PENDIENTE)
  total              Decimal?             @db.Decimal(10, 2)
  metodo_pago        String?              @db.VarChar(50)
  detalles           DetallePedido[]
  estadosPedido      EstadoPedido[]
  cliente            Usuario?             @relation("ClientePedidos", fields: [id_cliente], references: [id_usuario], onUpdate: NoAction, map: "fk_pedido_cliente")
  establecimiento    Establecimiento      @relation(fields: [id_establecimiento], references: [id_establecimiento], onUpdate: NoAction, map: "fk_pedido_establecimiento")

  @@map("pedidos")
}

model DetallePedido {
  id_detalle_pedido Int               @id @default(autoincrement())
  id_pedido         Int
  id_producto       Int
  cantidad          Int               @default(1)
  especialidades    String?
  estado            EstadoItemPedido?
  pedido            Pedido            @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, onUpdate: NoAction, map: "fk_detalle_pedido")
  producto          Producto          @relation(fields: [id_producto], references: [id_producto], onUpdate: NoAction, map: "fk_detalle_producto")

  @@map("detallespedido")
}

model EstadoPedido {
  id_estado_pedido Int                 @id @default(autoincrement())
  id_pedido        Int
  id_usuario       Int?
  estado           EstadoPedidoGeneral
  fecha_hora       DateTime            @default(now()) @db.Timestamp(6)
  pedido           Pedido              @relation(fields: [id_pedido], references: [id_pedido], onDelete: Cascade, onUpdate: NoAction, map: "fk_estado_pedido")
  usuario          Usuario?            @relation(fields: [id_usuario], references: [id_usuario], onUpdate: NoAction, map: "fk_estado_usuario")

  @@map("estadospedido")
}

enum RolUsuario {
  cliente
  camarero
  cocinero
  establishment_admin
  general_admin
}

enum EstadoPedidoGeneral {
  PENDIENTE
  EN_PREPARACION
  LISTO
  ENTREGADO
  COMPLETADO
  CANCELADO
}

enum EstadoItemPedido {
  PENDIENTE
  EN_PREPARACION
  LISTO
  ENTREGADO
  CANCELADO
}
