generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Establishment {
  establishmentId             Int                          @id @default(autoincrement()) @map("establishment_id")
  name                        String                       @db.VarChar(255)
  taxId                       String?                      @unique @map("tax_id") @db.VarChar(20)
  address                     String?
  postalCode                  String?                      @map("postal_code") @db.VarChar(10)
  city                        String?                      @db.VarChar(100)
  phone1                      String?                      @db.VarChar(20)
  phone2                      String?                      @db.VarChar(20)
  billingBankDetails          String?                      @map("billing_bank_details")
  paymentBankDetails          String?                      @map("payment_bank_details")
  contactPerson               String?                      @map("contact_person") @db.VarChar(255)
  description                 String?
  website                     String?                      @db.VarChar(255)
  isActive                    Boolean?                     @default(true) @map("is_active")
  acceptsOrders               Boolean                      @default(true) @map("accepts_orders")
  createdAt                   DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                   DateTime?                    @default(now()) @map("updated_at") @db.Timestamp(6)
  categories                  Category[]
  establishmentAdministrators EstablishmentAdministrator[] @relation("AdminEstablishment")
  productVariants             ProductVariant[]
  products                    Product[]
  users                       User[]
  orders                      Order[]

  @@map("establishments")
}

model User {
  userId                      Int                          @id @default(autoincrement()) @map("user_id")
  role                        UserRole
  name                        String?                      @db.VarChar(255)
  email                       String                       @unique @db.VarChar(255)
  passwordHash                String?                      @map("password_hash") @db.VarChar(255)
  establishmentId             Int?                         @map("establishment_id")
  googleId                    String?                      @unique @map("google_id")
  appleId                     String?                      @unique @map("apple_id")
  createdAt                   DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                   DateTime?                    @default(now()) @map("updated_at") @db.Timestamp(6)
  establishmentAdministrators EstablishmentAdministrator[] @relation("AdminUser")
  productVariantsCreated      ProductVariant[]             @relation("VariantCreator")
  createdProducts             Product[]                    @relation("ProductCreator")
  establishment               Establishment?               @relation(fields: [establishmentId], references: [establishmentId], onUpdate: NoAction, map: "fk_user_establishment")
  productHistoryEntries       ProductHistory[]
  clientOrders                Order[]                      @relation("ClientOrders")
  waiterOrders                Order[]                      @relation("WaiterOrders")
  orderStatusChanges          OrderStatusHistory[]         @relation("OrderStatusChanges")

  @@map("users")
}

model EstablishmentAdministrator {
  userId          Int           @map("user_id")
  establishmentId Int           @map("establishment_id")
  establishment   Establishment @relation("AdminEstablishment", fields: [establishmentId], references: [establishmentId], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_establishment")
  user            User          @relation("AdminUser", fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_user")

  @@id([userId, establishmentId])
  @@map("establishment_administrators")
}

model Category {
  categoryId      Int                   @id @default(autoincrement()) @map("category_id")
  establishmentId Int                   @map("establishment_id")
  name            String                @db.VarChar(255)
  sortOrder       Int?                  @default(0) @map("sort_order")
  isActive        Boolean?              @default(true) @map("is_active")
  createdAt       DateTime?             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?             @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt       DateTime?             @map("deleted_at") @db.Timestamp(6)
  establishment   Establishment         @relation(fields: [establishmentId], references: [establishmentId], onDelete: Cascade, onUpdate: NoAction, map: "fk_category_establishment")
  translations    CategoryTranslation[]
  products        Product[]

  @@map("categories")
}

model CategoryTranslation {
  translationId Int      @id @default(autoincrement()) @map("translation_id")
  categoryId    Int      @map("category_id")
  languageCode  String   @map("language_code") @db.VarChar(10)
  name          String   @db.VarChar(255)
  category      Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_category")

  @@unique([categoryId, languageCode], map: "unique_category_language")
  @@map("category_translations")
}

model Product {
  productId       Int                  @id @default(autoincrement()) @map("product_id")
  establishmentId Int                  @map("establishment_id")
  categoryId      Int                  @map("category_id")
  name            String               @db.VarChar(255)
  description     String?
  sortOrder       Int?                 @default(0) @map("sort_order")
  isActive        Boolean?             @default(true) @map("is_active")
  responsibleRole UserRole?            @map("responsible_role")
  createdByUserId Int?                 @map("created_by_user_id")
  createdAt       DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?            @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt       DateTime?            @map("deleted_at") @db.Timestamp(6)
  allergens       ProductAllergen[]
  history         ProductHistory[]
  translations    ProductTranslation[]
  variants        ProductVariant[]
  category        Category             @relation(fields: [categoryId], references: [categoryId], onUpdate: NoAction, map: "fk_product_category")
  creator         User?                @relation("ProductCreator", fields: [createdByUserId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_creator")
  establishment   Establishment        @relation(fields: [establishmentId], references: [establishmentId], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_establishment")

  @@map("products")
}

model ProductTranslation {
  translationId Int     @id @default(autoincrement()) @map("translation_id")
  productId     Int     @map("product_id")
  languageCode  String  @map("language_code") @db.VarChar(10)
  name          String  @db.VarChar(255)
  description   String?
  product       Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_product")

  @@unique([productId, languageCode], map: "unique_product_language")
  @@map("product_translations")
}

model ProductHistory {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  name        String?
  description String?
  isActive    Boolean? @map("is_active")
  changedAt   DateTime @default(now()) @map("changed_at")
  actionType  String   @map("action_type")
  details     Json?
  userId      Int?     @map("user_id")

  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [userId], onDelete: SetNull)

  @@map("product_history")
}

model ProductVariant {
  variantId          Int                         @id @default(autoincrement()) @map("variant_id")
  productId          Int                         @map("product_id")
  establishmentId    Int                         @map("establishment_id")
  variantDescription String                      @map("variant_description") @db.VarChar(100)
  price              Decimal                     @db.Decimal(10, 2)
  sku                String?                     @unique @db.VarChar(50)
  sortOrder          Int?                        @default(0) @map("sort_order")
  isActive           Boolean?                    @default(true) @map("is_active")
  createdByUserId    Int?                        @map("created_by_user_id")
  createdAt          DateTime?                   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?                   @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt          DateTime?                   @map("deleted_at") @db.Timestamp(6)
  history            ProductVariantHistory[]
  translations       ProductVariantTranslation[]
  orderItems         OrderItem[]
  creator            User?                       @relation("VariantCreator", fields: [createdByUserId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  establishment      Establishment               @relation(fields: [establishmentId], references: [establishmentId], onDelete: Cascade, onUpdate: NoAction)
  product            Product                     @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([productId, variantDescription])
  @@map("product_variants")
}

model ProductVariantTranslation {
  translationId      Int            @id @default(autoincrement()) @map("translation_id")
  variantId          Int            @map("variant_id")
  languageCode       String         @map("language_code") @db.VarChar(10)
  variantDescription String         @map("variant_description") @db.VarChar(255)
  variant            ProductVariant @relation(fields: [variantId], references: [variantId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([variantId, languageCode])
  @@map("product_variant_translations")
}

model ProductVariantHistory {
  id                 Int             @id @default(autoincrement())
  variantId          Int?            @map("variant_id")
  variantDescription String?         @map("variant_description")
  price              Decimal?        @db.Decimal(10, 2)
  isActive           Boolean?        @map("is_active")
  updatedAt          DateTime?       @default(now()) @map("updated_at") @db.Timestamp(6)
  variant            ProductVariant? @relation(fields: [variantId], references: [variantId], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_variant_history")
}

model Allergen {
  allergenId       Int                   @id @default(autoincrement()) @map("allergen_id")
  code             String                @unique @db.VarChar(20)
  name             String                @db.VarChar(100)
  description      String?
  iconUrl          String?               @map("icon_url") @db.VarChar(255)
  isMajorAllergen  Boolean?              @default(true) @map("is_major_allergen")
  translations     AllergenTranslation[]
  productAllergens ProductAllergen[]

  @@map("allergens")
}

model AllergenTranslation {
  translationId Int      @id @default(autoincrement()) @map("translation_id")
  allergenId    Int      @map("allergen_id")
  languageCode  String   @map("language_code") @db.VarChar(10)
  name          String   @db.VarChar(100)
  description   String?
  allergen      Allergen @relation(fields: [allergenId], references: [allergenId], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_allergen")

  @@unique([allergenId, languageCode], map: "unique_allergen_language")
  @@map("allergen_translations")
}

model ProductAllergen {
  productId  Int      @map("product_id")
  allergenId Int      @map("allergen_id")
  allergen   Allergen @relation(fields: [allergenId], references: [allergenId], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_allergen")
  product    Product  @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_product")

  @@id([productId, allergenId])
  @@map("product_allergens")
}

model Order {
  orderId         Int         @id @default(autoincrement()) @map("order_id")
  establishmentId Int         @map("establishment_id")
  clientUserId    Int?        @map("client_user_id")
  waiterUserId    Int?        @map("waiter_user_id")
  tableNumber     String?     @map("table_number") @db.VarChar(20)
  status          OrderStatus @default(pending)
  totalAmount     Decimal     @default(0.00) @map("total_amount") @db.Decimal(10, 2)
  paymentMethod   String?     @map("payment_method") @db.VarChar(50)
  paymentStatus   String?     @default("unpaid") @map("payment_status") @db.VarChar(20)
  orderType       String?     @map("order_type") @db.VarChar(50)
  notes           String?
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime    @default(now()) @map("updated_at") @db.Timestamp(6)

  establishment Establishment        @relation(fields: [establishmentId], references: [establishmentId], onDelete: Restrict, onUpdate: NoAction)
  clientUser    User?                @relation("ClientOrders", fields: [clientUserId], references: [userId], onDelete: SetNull, onUpdate: NoAction)
  waiterUser    User?                @relation("WaiterOrders", fields: [waiterUserId], references: [userId], onDelete: SetNull, onUpdate: NoAction)
  orderItems    OrderItem[]
  statusHistory OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  orderItemId Int              @id @default(autoincrement()) @map("order_item_id")
  orderId     Int              @map("order_id")
  variantId   Int              @map("variant_id")
  quantity    Int              @default(1)
  unitPrice   Decimal          @map("unit_price") @db.Decimal(10, 2)
  status      OrderItemStatus? @default(pending)
  notes       String?

  order   Order          @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: NoAction)
  variant ProductVariant @relation(fields: [variantId], references: [variantId], onDelete: Restrict, onUpdate: NoAction)

  @@map("order_items")
}

model OrderStatusHistory {
  historyId       Int         @id @default(autoincrement()) @map("history_id")
  orderId         Int         @map("order_id")
  status          OrderStatus
  changedByUserId Int?        @map("changed_by_user_id")
  changedAt       DateTime    @default(now()) @map("changed_at") @db.Timestamp(6)
  notes           String?

  order         Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: NoAction)
  changedByUser User? @relation("OrderStatusChanges", fields: [changedByUserId], references: [userId], onDelete: SetNull, onUpdate: NoAction)

  @@map("order_status_history")
}

enum UserRole {
  client
  waiter
  cook
  establishment_admin
  general_admin
}

enum OrderStatus {
  pending
  preparing
  ready
  delivered
  cancelled
  completed
}

enum OrderItemStatus {
  pending
  preparing
  ready
  delivered
}
