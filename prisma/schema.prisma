generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Establishment {
  establishment_id             Int                          @id @default(autoincrement())
  name                         String                       @db.VarChar(255)
  tax_id                       String?                      @unique @db.VarChar(20)
  address                      String?
  postal_code                  String?                      @db.VarChar(10)
  city                         String?                      @db.VarChar(100)
  phone1                       String?                      @db.VarChar(20)
  phone2                       String?                      @db.VarChar(20)
  billing_bank_details         String?
  payment_bank_details         String?
  contact_person               String?                      @db.VarChar(255)
  description                  String?
  website                      String?                      @db.VarChar(255)
  is_active                    Boolean?                     @default(true)
  accepts_orders               Boolean                      @default(true)
  created_at                   DateTime?                    @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?                    @default(now()) @db.Timestamp(6)
  categories                   Category[]
  establishment_administrators EstablishmentAdministrator[]
  product_variants             ProductVariant[]
  products                     Product[]
  users                        User[]
  orders                       Order[]

  @@map("establishments")
}

model User {
  user_id                      Int                          @id @default(autoincrement())
  role                         UserRole
  name                         String?                      @db.VarChar(255)
  email                        String                       @unique @db.VarChar(255)
  password_hash                String?                      @db.VarChar(255)
  establishment_id             Int?
  // Campo OAuth solo para Google
  google_id                    String?                      @unique
  apple_id                     String?                      @unique // Mantener pero no usar por ahora
  created_at                   DateTime?                    @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?                    @default(now()) @db.Timestamp(6)
  establishment_administrators EstablishmentAdministrator[]
  product_variants_created     ProductVariant[]             @relation("VariantCreator")
  created_products             Product[]                    @relation("ProductCreator")
  establishment                Establishment?               @relation(fields: [establishment_id], references: [establishment_id], onUpdate: NoAction, map: "fk_user_establishment")
  product_history_entries      ProductHistory[]
  client_orders                Order[]                      @relation("ClientOrders")
  waiter_orders                Order[]                      @relation("WaiterOrders")
  order_status_changes         OrderStatusHistory[]         @relation("OrderStatusChanges")

  @@map("users")
}

model EstablishmentAdministrator {
  user_id          Int
  establishment_id Int
  establishment    Establishment @relation(fields: [establishment_id], references: [establishment_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_establishment")
  user             User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ea_user")

  @@id([user_id, establishment_id])
  @@map("establishment_administrators")
}

model Category {
  category_id      Int                   @id @default(autoincrement())
  establishment_id Int
  name             String                @db.VarChar(255)
  sort_order       Int?                  @default(0)
  is_active        Boolean?              @default(true)
  created_at       DateTime?             @default(now()) @db.Timestamp(6)
  updated_at       DateTime?             @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?             @db.Timestamp(6)
  establishment    Establishment         @relation(fields: [establishment_id], references: [establishment_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_category_establishment")
  translations     CategoryTranslation[]
  products         Product[]

  @@map("categories")
}

model CategoryTranslation {
  translation_id Int      @id @default(autoincrement())
  category_id    Int
  language_code  String   @db.VarChar(10)
  name           String   @db.VarChar(255)
  category       Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_category")

  @@unique([category_id, language_code], map: "unique_category_language")
  @@map("category_translations")
}

model Product {
  product_id         Int                  @id @default(autoincrement())
  establishment_id   Int
  category_id        Int
  name               String               @db.VarChar(255)
  description        String?
  sort_order         Int?                 @default(0)
  is_active          Boolean?             @default(true)
  responsible_role   UserRole?
  created_by_user_id Int?
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  allergens          ProductAllergen[]
  history            ProductHistory[]
  translations       ProductTranslation[]
  variants           ProductVariant[]
  category           Category             @relation(fields: [category_id], references: [category_id], onUpdate: NoAction, map: "fk_product_category")
  creator            User?                @relation("ProductCreator", fields: [created_by_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_creator")
  establishment      Establishment        @relation(fields: [establishment_id], references: [establishment_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_establishment")

  @@map("products")
}

model ProductTranslation {
  translation_id Int     @id @default(autoincrement())
  product_id     Int
  language_code  String  @db.VarChar(10)
  name           String  @db.VarChar(255)
  description    String?
  product        Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_product")

  @@unique([product_id, language_code], map: "unique_product_language")
  @@map("product_translations")
}

model ProductHistory {
  id          Int      @id @default(autoincrement())
  product_id  Int
  name        String?
  description String?
  is_active   Boolean?
  changed_at  DateTime @default(now())
  action_type String
  details     Json?
  user_id     Int?

  product Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  user    User?   @relation(fields: [user_id], references: [user_id], onDelete: SetNull)

  @@map("product_history")
}

model ProductVariant {
  variant_id          Int                         @id @default(autoincrement())
  product_id          Int
  establishment_id    Int
  variant_description String                      @db.VarChar(100)
  price               Decimal                     @db.Decimal(10, 2)
  sku                 String?                     @unique @db.VarChar(50)
  sort_order          Int?                        @default(0)
  is_active           Boolean?                    @default(true)
  created_by_user_id  Int?
  created_at          DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at          DateTime?                   @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?                   @db.Timestamp(6)
  history             ProductVariantHistory[]
  translations        ProductVariantTranslation[]
  order_items         OrderItem[]
  creator             User?                       @relation("VariantCreator", fields: [created_by_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  establishment       Establishment               @relation(fields: [establishment_id], references: [establishment_id], onDelete: Cascade, onUpdate: NoAction)
  product             Product                     @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([product_id, variant_description])
  @@map("product_variants")
}

model ProductVariantTranslation {
  translation_id      Int            @id @default(autoincrement())
  variant_id          Int
  language_code       String         @db.VarChar(10)
  variant_description String         @db.VarChar(255)
  variant             ProductVariant @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([variant_id, language_code])
  @@map("product_variant_translations")
}

model ProductVariantHistory {
  id                  Int             @id @default(autoincrement())
  variant_id          Int?
  variant_description String?
  price               Decimal?        @db.Decimal(10, 2)
  is_active           Boolean?
  updated_at          DateTime?       @default(now()) @db.Timestamp(6)
  variant             ProductVariant? @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_variant_history")
}

model Allergen {
  allergen_id       Int                   @id @default(autoincrement())
  code              String                @unique @db.VarChar(20)
  name              String                @db.VarChar(100)
  description       String?
  icon_url          String?               @db.VarChar(255)
  is_major_allergen Boolean?              @default(true)
  translations      AllergenTranslation[]
  product_allergens ProductAllergen[]

  @@map("allergens")
}

model AllergenTranslation {
  translation_id Int      @id @default(autoincrement())
  allergen_id    Int
  language_code  String   @db.VarChar(10)
  name           String   @db.VarChar(100)
  description    String?
  allergen       Allergen @relation(fields: [allergen_id], references: [allergen_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_translation_allergen")

  @@unique([allergen_id, language_code], map: "unique_allergen_language")
  @@map("allergen_translations")
}

model ProductAllergen {
  product_id  Int
  allergen_id Int
  allergen    Allergen @relation(fields: [allergen_id], references: [allergen_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_allergen")
  product     Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pa_product")

  @@id([product_id, allergen_id])
  @@map("product_allergens")
}

model Order {
  order_id         Int         @id @default(autoincrement())
  establishment_id Int
  client_user_id   Int?
  waiter_user_id   Int?
  table_number     String?     @db.VarChar(20)
  status           OrderStatus @default(pending)
  total_amount     Decimal     @default(0.00) @db.Decimal(10, 2)
  payment_method   String?     @db.VarChar(50)
  payment_status   String?     @default("unpaid") @db.VarChar(20)
  order_type       String?     @db.VarChar(50)
  notes            String?
  created_at       DateTime    @default(now()) @db.Timestamp(6)
  updated_at       DateTime    @default(now()) @db.Timestamp(6)

  establishment  Establishment        @relation(fields: [establishment_id], references: [establishment_id], onDelete: Restrict, onUpdate: NoAction)
  client_user    User?                @relation("ClientOrders", fields: [client_user_id], references: [user_id], onDelete: SetNull, onUpdate: NoAction)
  waiter_user    User?                @relation("WaiterOrders", fields: [waiter_user_id], references: [user_id], onDelete: SetNull, onUpdate: NoAction)
  order_items    OrderItem[]
  status_history OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  order_item_id Int              @id @default(autoincrement())
  order_id      Int
  variant_id    Int
  quantity      Int              @default(1)
  unit_price    Decimal          @db.Decimal(10, 2)
  status        OrderItemStatus? @default(pending)
  notes         String?

  order   Order          @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  variant ProductVariant @relation(fields: [variant_id], references: [variant_id], onDelete: Restrict, onUpdate: NoAction)

  @@map("order_items")
}

model OrderStatusHistory {
  history_id         Int         @id @default(autoincrement())
  order_id           Int
  status             OrderStatus
  changed_by_user_id Int?
  changed_at         DateTime    @default(now()) @db.Timestamp(6)
  notes              String?

  order           Order @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  changed_by_user User? @relation("OrderStatusChanges", fields: [changed_by_user_id], references: [user_id], onDelete: SetNull, onUpdate: NoAction)

  @@map("order_status_history")
}

enum UserRole {
  client
  waiter
  cook
  establishment_admin
  general_admin
}

enum OrderStatus {
  pending
  preparing
  ready
  delivered
  cancelled
  completed
}

enum OrderItemStatus {
  pending
  preparing
  ready
  delivered
}
