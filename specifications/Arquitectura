; ✅ ARQUITECTURA ACTUALIZADA - PIDE APP
; Aplicación de pedidos para restaurantes con QR
; Última actualización: 2025

; =============================================================================
; FLUJO DE DATOS PRINCIPAL
; =============================================================================

A[schema.prisma] --> B[Prisma Client]
    B --> C[Types/DTOs]
    C --> D[Zod Schemas]
    D --> E[Database Services]
    E --> F[API Routes]
    F --> G[Frontend Services]
    G --> H[React Components]
    H --> I[Styles/UI]

; =============================================================================
; CONVENCIÓN DE CÓDIGO
; =============================================================================

; 📋 REGLAS DE NOMENCLATURA:

; Base de datos (PostgreSQL):
; - snake_case para tablas y columnas: order_id, user_email, establishment_id
; - snake_case para ENUMs: 'client', 'waiter', 'cook', 'establishment_admin', 'general_admin'

; Backend (Node.js/TypeScript):
; - camelCase en TODO el código: variables, funciones, DTOs, servicios, etc.
; - Prisma mapea automáticamente de snake_case (DB) a camelCase (código)
; - Roles en snake_case para coherencia con DB: UserRole.establishment_admin

; API Responses (Backend → Frontend):
; - Devuelve datos en camelCase
; - Usar camelcase-keys en backend antes de devolver datos
; - Frontend siempre recibe camelCase

; Frontend (React/TypeScript):
; - camelCase en todo: variables, props, DTOs, hooks, componentes
; - Roles en snake_case: session.user.role === 'establishment_admin'

; CSS/Estilos:
; - kebab-case para clases CSS: .menu-management, .admin-card, .product-grid
; - Prefijos por funcionalidad: .admin-, .menu-, .order-, .auth-
; - Variables CSS con doble guión: --color-primary, --spacing-md
; - Tailwind utilities como complemento, no reemplazo

; 🔄 TRANSFORMACIONES:
; - snake_case → camelCase: En backend, después de obtener datos de DB
; - camelCase → snake_case: Solo si backend espera datos en snake_case (POST/PUT)

; Ejemplo de transformación:
; DB: { user_id: 1, establishment_id: 2, created_at: "2025-01-01" }
; ↓ (Backend transforma con camelcase-keys)
; API: { userId: 1, establishmentId: 2, createdAt: "2025-01-01" }
; ↓ (Frontend recibe)
; Frontend: const { userId, establishmentId, createdAt } = data

; =============================================================================
; 1. DATABASE SCHEMA DEFINITION
; =============================================================================

prisma/
├── schema.prisma      # Definición completa del modelo de datos
└── seed.ts           # Datos iniciales (alérgenos, roles, etc.)

; Generated Types (Auto-generated)
node_modules/
└── .prisma/
    └── client/       # Tipos auto-generados por Prisma

; ENUMs en la base de datos:
; CREATE TYPE "UserRole" AS ENUM ('client', 'waiter', 'cook', 'establishment_admin', 'general_admin');
; CREATE TYPE "OrderStatus" AS ENUM ('pending', 'preparing', 'ready', 'delivered', 'cancelled', 'completed');

; =============================================================================
; 2. STYLES & UI SYSTEM - Diseño minimalista con Tailwind
; =============================================================================

src/styles/
├── globals.css               # Imports principales y configuración Tailwind
├── base.css                  # Variables CSS, reset, estilos base minimalistas
├── utilities.css             # Clases utilitarias personalizadas
├── fonts.css                 # Configuración de fuentes
├── admin.css                 # Estilos específicos de administración
├── components/               # Estilos por componente
│   ├── allergens.css        # Componentes de alérgenos (.allergen-item, .allergen-grid)
│   ├── buttons.css          # Sistema de botones (.btn, .btn-primary, .btn-secondary)
│   ├── cards.css            # Tarjetas reutilizables (.admin-card, .product-card)
│   ├── cart.css             # Componentes del carrito (.cart-item, .cart-summary)
│   ├── forms.css            # Formularios (.form-group, .form-input, .form-error)
│   └── navigation.css       # Navegación (.admin-nav, .menu-tabs, .breadcrumb)
└── pages/                    # Estilos específicos por página
    ├── admin.css            # Páginas de administración (.admin-dashboard)
    ├── checkout.css         # Proceso de pago (.checkout-step, .payment-form)
    ├── login.css            # Login/registro (.login-form, .auth-container)
    └── menu.css             # Vista pública del menú (.menu-grid, .category-filter)

; 🎨 SISTEMA DE DISEÑO:

; Variables CSS principales (src/styles/base.css):
; --color-primary: #000        # Negro principal
; --color-secondary: #fff      # Blanco secundario
; --color-text: #000          # Texto principal
; --color-text-muted: #666    # Texto secundario
; --color-border: #e5e7eb     # Bordes estándar
; --spacing-xs: 0.25rem       # 4px
; --spacing-sm: 0.5rem        # 8px
; --spacing-md: 1rem          # 16px
; --spacing-lg: 1.5rem        # 24px
; --spacing-xl: 2rem          # 32px

; Convenciones de clases CSS:
; .admin-*        # Componentes de administración
; .menu-*         # Componentes de menú
; .order-*        # Componentes de pedidos
; .auth-*         # Componentes de autenticación
; .product-*      # Componentes de productos
; .category-*     # Componentes de categorías

; Uso de Tailwind:
; - Utilities para spacing: p-4, m-2, gap-4
; - Utilities para layout: flex, grid, w-full
; - Utilities para responsive: sm:, md:, lg:
; - CSS personalizado para componentes complejos

; Ejemplo de estructura:
; <div className="admin-card p-6">              # CSS custom + Tailwind
;   <div className="flex items-center gap-4">   # Solo Tailwind
;     <h2 className="admin-card-title">...</h2>  # CSS custom
;   </div>
; </div>

; =============================================================================
; 3. TYPE DEFINITIONS - Estructura por funcionalidad
; =============================================================================

src/types/
├── auth.ts                    # AuthGuardProps, Session types
├── forms.ts                   # Form-related types
├── management.ts              # MenuManagementProps, CategoryManagementProps
├── next-auth.d.ts            # NextAuth extensions y custom session
├── orderConfirmation.ts       # Order confirmation types
├── pages.ts                   # Page component types
├── dtos/                      # Input/Request types para APIs
│   ├── allergen.ts           # AllergenResponseDTO, CreateAllergenDTO
│   ├── category.ts           # CategoryDTO, CreateCategoryDTO
│   ├── establishment.ts      # EstablishmentResponseDTO, UpdateEstablishmentDTO
│   ├── order.ts             # CreateOrderDTO, UpdateOrderStatusDTO
│   ├── product.ts           # ProductResponseDTO, CreateProductDTO
│   ├── user.ts              # UserResponseDTO, CreateUserDTO
│   └── ...
├── entities/                  # Database entity types (Prisma-derived)
│   ├── allergen.ts           # Allergen, AllergenTranslation
│   ├── category.ts           # Category, CategoryTranslation
│   ├── establishment.ts      # Establishment
│   ├── order.ts             # Order, OrderItem
│   ├── product.ts           # Product, ProductTranslation
│   ├── user.ts              # User
│   └── ...
├── serialized/                # API response types (JSON-safe)
│   ├── allergen.ts           # SerializedAllergen
│   ├── category.ts           # SerializedCategory
│   ├── establishment.ts      # SerializedEstablishment
│   ├── order.ts             # SerializedOrder
│   ├── product.ts           # SerializedProduct
│   └── ...
└── errors/                    # API error types específicos
    ├── category.api.error.ts
    ├── order.api.error.ts
    ├── product.api.error.ts
    └── ...

; =============================================================================
; 4. ZOD SCHEMAS - Validación de datos
; =============================================================================

src/schemas/
├── common.ts        # Reglas de validación compartidas
├── allergen.ts      # Validación de alérgenos
├── category.ts      # Validación de categorías
├── order.ts         # CreateOrderSchema, UpdateOrderStatusSchema
├── product.ts       # CreateProductSchema, UpdateProductSchema
├── user.ts          # CreateUserSchema, UpdateUserSchema
└── ...

; Ejemplo de uso:
; export const CreateOrderSchema = z.object({
;   establishmentId: z.number(),  // ← camelCase en validación
;   items: z.array(orderItemSchema),
;   notes: z.string().optional()
; })

; =============================================================================
; 5. DATABASE SERVICES - Lógica de negocio (Classes)
; =============================================================================

src/services/
├── user.service.ts          # UserService class con CRUD
├── allergen.service.ts      # AllergenService class
├── category.service.ts      # CategoryService class
├── establishment.service.ts # EstablishmentService class
├── order.service.ts         # OrderService class
├── product.service.ts       # ProductService class
└── ...

; Ejemplo de estructura:
; export class OrderService {
;   static async createOrder(data: CreateOrderDTO): Promise<Order>
;   static async getOrdersByEstablishment(establishmentId: number)
;   static async updateOrderStatus(orderId: number, status: OrderStatus)
; }

; =============================================================================
; 6. API ROUTES - Endpoints organizados por funcionalidad
; =============================================================================

src/app/api/
├── auth/
│   └── [...nextauth]/
│       └── route.ts           # NextAuth configuration
├── admin/                     # 🔒 Admin-only endpoints (requieren autenticación)
│   └── establishments/
│       └── [establishmentId]/
│           ├── route.ts       # Admin establishment management
│           └── menu/
│               ├── allergens/
│               │   ├── route.ts         # GET, POST allergens (admin)
│               │   └── [allergenId]/
│               │       └── route.ts     # GET, PUT, DELETE allergen
│               ├── categories/
│               │   ├── route.ts         # GET, POST categories (admin)
│               │   └── [categoryId]/
│               │       └── route.ts     # GET, PUT, DELETE category
│               ├── products/
│               │   ├── route.ts         # GET, POST products (admin)
│               │   └── [productId]/
│               │       └── route.ts     # GET, PUT, DELETE product
│               └── variants/
│                   ├── route.ts         # GET, POST variants (admin)
│                   └── [variantId]/
│                       └── route.ts     # GET, PUT, DELETE variant
├── menu/                      # 🌐 Public menu endpoints (sin autenticación)
│   └── [establishmentId]/
│       ├── route.ts           # Menu overview
│       ├── allergens/
│       │   └── route.ts       # GET allergens (public)
│       ├── categories/
│       │   └── route.ts       # GET categories (public)
│       ├── products/
│       │   └── route.ts       # GET products (public)
│       └── variants/
│           └── route.ts       # GET variants (public)
├── orders/                    # 📦 Order management
│   ├── route.ts               # POST create order (client)
│   └── [orderId]/
│       └── route.ts           # GET order details/status
└── super-admin/               # 👑 Super admin endpoints
    ├── allergens/
    │   └── route.ts
    ├── establishments/
    │   ├── route.ts
    │   └── [id]/
    │       └── route.ts
    └── users/
        ├── route.ts
        └── [id]/
            └── route.ts

; =============================================================================
; 7. FRONTEND API SERVICES - Cliente API
; =============================================================================

src/services/api/              # API client functions
├── allergen.api.ts           # getAllAllergens, getAllergensForAdmin
├── category.api.ts           # getAllCategoriesByEstablishment, createCategory
├── establishment.api.ts      # getEstablishmentById, updateEstablishment
├── order.api.ts             # createClientOrder, getOrdersByEstablishment
├── product.api.ts           # getProductsByCategory, createProduct
└── user.api.ts              # createUser, getUserById

; Ejemplo:
; export async function createClientOrder(orderData: CreateOrderDTO) {
;   const response = await fetch('/api/orders', {
;     method: 'POST',
;     body: JSON.stringify(orderData)  // ← datos en camelCase
;   })
;   return response.json()
; }

; =============================================================================
; 8. FRONTEND PAGES - Rutas internacionalizadas
; =============================================================================

src/app/[lang]/               # Routing internacionalizado
├── layout.tsx               # Layout principal con providers
├── page.tsx                 # Home page
├── admin/                   # 🔒 Panel de administración
│   └── [establishmentId]/
│       ├── page.tsx         # Dashboard de admin
│       ├── employees/
│       │   └── page.tsx     # Gestión de empleados
│       └── menu/
│           └── page.tsx     # 🎯 Gestión de menú (MenuManagement)
├── cart/
│   └── page.tsx             # Carrito de compra
├── login/
│   ├── page.tsx
│   └── LoginPageClient.tsx  # Componente cliente de login
├── menu/                    # 🌐 Vista pública del menú
│   └── [establishmentId]/
│       └── page.tsx         # Menu del cliente (QR scan)
├── order/
│   └── [orderId]/
│       ├── page.tsx         # Detalles del pedido
│       └── track/
│           └── page.tsx     # Seguimiento del pedido
└── register/
    ├── page.tsx
    └── RegisterPageClient.tsx

; =============================================================================
; 9. REACT COMPONENTS - Organizados por funcionalidad
; =============================================================================

src/components/
├── admin/                    # Componentes específicos de admin
│   └── AdminNavbar.tsx
├── auth/                     # Componentes de autenticación
│   └── AuthGuard.tsx        # Protección de rutas
├── management/               # 🎯 Componentes de gestión (NUEVOS)
│   ├── MenuManagement.tsx   # Gestión principal del menú
│   ├── CategoryManagement.tsx # Gestión de categorías
│   ├── ProductManagement.tsx  # Gestión de productos
│   └── VariantManagement.tsx  # Gestión de variantes
├── order/                    # Componentes de pedidos
│   ├── OrderForm.tsx        # Formulario de pedido (cliente)
│   ├── OrderList.tsx        # Lista de pedidos (empleados)
│   ├── OrderCard.tsx        # Tarjeta individual de pedido
│   └── OrderFilters.tsx     # Filtros para empleados
└── ...

; =============================================================================
; 10. TRANSLATIONS - Sistema de internacionalización
; =============================================================================

src/translations/
├── modules/
│   └── admin/
│       ├── index.ts         # Exportaciones principales
│       ├── en.ts           # Traducciones inglés admin
│       ├── es.ts           # Traducciones español admin
│       └── fr.ts           # Traducciones francés admin
└── types/
    └── admin.ts            # Tipos de traducciones admin

; Estructura de traducciones:
; {
;   establishmentAdmin: {
;     menuManagement: {
;       title: "...",
;       categories: { title: "..." },
;       products: { title: "..." }
;     },
;     messages: {
;       error: { title: "Error", loadingFailed: "..." },
;       success: { categoryCreated: "..." }
;     }
;   }
; }

; =============================================================================
; 11. FLUJOS DE DATOS PRINCIPALES
; =============================================================================

; FLUJO 1: Gestión de Menú (Admin) - ✅ CORREGIDO
; Administrador (establishment_admin/general_admin) accede a: /es/admin/1/menu
; ↓
; Middleware verifica: session.user.role in ['waiter', 'cook', 'establishment_admin', 'general_admin']
; ↓
; MenuManagement.tsx se carga (clases: .menu-management, .admin-card)
; ↓
; Fetch categories: /api/admin/establishments/1/menu/categories
; Fetch allergens: /api/admin/establishments/1/menu/allergens
; ↓
; Backend transforma snake_case → camelCase antes de responder
; ↓
; category.service.ts maneja la lógica de BD
; ↓
; Datos mostrados en CategoryManagement/ProductManagement (.category-grid, .product-card)

; FLUJO 2: Vista de Menú (Cliente QR)
; Cliente (role: 'client') escanea QR: /es/menu/1
; ↓
; Página pública de menú (sin autenticación requerida) (.menu-grid, .category-filter)
; ↓
; Fetch menu: /api/menu/1/categories, /api/menu/1/products
; ↓
; Servicios públicos (sin autenticación)
; ↓
; Backend transforma datos a camelCase
; ↓
; Datos mostrados al cliente (.product-card, .allergen-item)

; FLUJO 3: Crear Pedido (Cliente)
; Cliente selecciona productos en /es/menu/1
; ↓
; OrderForm.tsx recopila datos del carrito (camelCase) (.cart-item, .cart-summary)
; ↓
; POST /api/orders con CreateOrderDTO (camelCase)
; ↓
; Backend recibe camelCase, puede transformar a snake_case si necesario
; ↓
; order.service.ts crea pedido en BD
; ↓
; Confirmación al cliente (datos en camelCase) (.order-confirmation)

; FLUJO 4: Gestión de Pedidos (Empleados)
; Empleado (waiter/cook) accede a dashboard de pedidos
; ↓
; Middleware verifica: session.user.role in ['waiter', 'cook', 'establishment_admin']
; ↓
; GET /api/admin/establishments/1/orders (con filtros)
; ↓
; order.service.ts obtiene pedidos del establecimiento
; ↓
; Backend transforma datos a camelCase
; ↓
; OrderList.tsx muestra pedidos (.order-list, .order-card)
; ↓
; Empleado puede cambiar estado via PATCH /api/orders/[orderId]

; FLUJO 5: Roles y Permisos
; Base de datos: user.role = 'establishment_admin' (snake_case)
; ↓
; Session: session.user.role = 'establishment_admin' (mantiene snake_case)
; ↓
; Frontend: if (session.user.role === 'establishment_admin') { ... }
; ↓
; Middleware: allowedRoles.includes(session.user.role as UserRole)

; =============================================================================
; 12. ARCHIVOS CLAVE PARA DESARROLLO DIARIO
; =============================================================================

; Más utilizados día a día:
; 1. src/types/management.ts - Tipos de componentes de gestión
; 2. src/components/management/ - Componentes de administración
; 3. src/services/*.service.ts - Lógica de negocio
; 4. src/translations/modules/admin/ - Traducciones de admin
; 5. schema.prisma - Estructura de BD
; 6. src/styles/admin.css - Estilos de administración
; 7. src/styles/components/ - Estilos por componente

; Para nuevas características:
; 8. src/schemas/ - Validación de datos
; 9. src/app/api/ - Endpoints API
; 10. src/services/api/ - Cliente API
; 11. src/styles/pages/ - Estilos específicos de página

; =============================================================================
; 13. CONFIGURACIÓN Y UTILIDADES
; =============================================================================

src/lib/
├── prisma.ts             # Cliente Prisma (singleton)
├── api-client.ts         # Configuración cliente API
└── logger.ts            # Sistema de logging

src/utils/
├── apiUtils.ts          # Utilidades para APIs
├── serializers.ts       # Funciones de serialización
├── translations.ts      # Utilidades de traducciones
└── camelcaseKeys.ts     # Transformación snake_case ↔ camelCase

src/middleware/
└── auth-middleware.ts   # Middleware de autenticación

; Configuración raíz:
.env                     # Variables de entorno
next.config.js          # Configuración Next.js
tailwind.config.js      # Configuración Tailwind CSS
tsconfig.json           # Configuración TypeScript
package.json            # Dependencias y scripts

; =============================================================================
; 14. CONFIGURACIÓN TAILWIND Y SISTEMA DE DISEÑO
; =============================================================================

; tailwind.config.js - Configuración extendida:
; module.exports = {
;   content: ['./src/**/*.{js,ts,jsx,tsx}'],
;   theme: {
;     extend: {
;       colors: {
;         primary: '#000',
;         secondary: '#fff',
;         muted: '#666',
;         border: '#e5e7eb'
;       },
;       spacing: {
;         '18': '4.5rem',
;         '88': '22rem'
;       }
;     }
;   }
; }

; Estrategia de estilos:
; 1. Variables CSS para valores que cambian (colores, espaciados)
; 2. Tailwind para utilities rápidas (flex, grid, responsive)
; 3. CSS personalizado para componentes complejos
; 4. Prefijos por funcionalidad para evitar conflictos

; Ejemplo de uso combinado:
; <div className="admin-card p-6 bg-white border border-gray-200 rounded-lg">
;   <h2 className="admin-card-title text-xl font-semibold mb-4">...</h2>
;   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
;     <div className="product-card">...</div>
;   </div>
; </div>

; =============================================================================
; 15. CARACTERÍSTICAS ARQUITECTÓNICAS PRINCIPALES
; =============================================================================

; ✅ Separación Admin/Public APIs - Endpoints diferenciados por roles
; ✅ Internacionalización completa - Rutas con [lang] y traducciones
; ✅ Gestión de componentes - Separación clara por funcionalidad
; ✅ Servicios tipados - Classes con métodos específicos
; ✅ Middleware de auth - Protección automática de rutas
; ✅ Validación con Zod - Esquemas de validación en tiempo de ejecución
; ✅ Sistema de traducciones - Soporte multiidioma completo
; ✅ Convenciones de código consistentes - snake_case (DB) ↔ camelCase (código)
; ✅ Control de acceso granular - Roles específicos por funcionalidad
; ✅ Sistema de diseño híbrido - CSS personalizado + Tailwind utilities
; ✅ Estilos organizados - Por componente y funcionalidad
; ✅ Diseño minimalista - Variables CSS consistentes
; ✅ Arquitectura escalable - Fácil agregar nuevas funcionalidades

; =============================================================================
; 16. ROLES Y PERMISOS POR FUNCIONALIDAD
; =============================================================================

; 🔐 ROLES DISPONIBLES:
; - 'client': Solo acceso público (menú, pedidos propios)
; - 'waiter': Gestión de pedidos, vista de menú admin
; - 'cook': Gestión de pedidos (cocina), vista de menú admin
; - 'establishment_admin': Gestión completa del establecimiento
; - 'general_admin': Acceso completo al sistema

; 📋 PERMISOS POR ENDPOINT:
; /api/menu/* - Público (todos los roles)
; /api/orders (POST) - 'client' para crear, resto para gestionar
; /api/admin/establishments/*/menu/* - ['waiter', 'cook', 'establishment_admin', 'general_admin']
; /api/admin/establishments/*/employees/* - ['establishment_admin', 'general_admin']
; /api/super-admin/* - Solo 'general_admin'

; =============================================================================
; FIN DE ARQUITECTURA
; =============================================================================
